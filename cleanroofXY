local tArgs = { ... }
if #tArgs ~= 2 then
        print( "Usage: floor <x> <x>" )
        return
end

os.loadAPI("/sm")


 function checkMat()
	if(turtle.getItemCount(tab[1]))==0 then
		table.remove(tab,1)
		for i=1,table.maxn(tab) do
			if turtle.getItemCount(tab[1])>0 then
				return tab
			else 
				table.remove(tab,1)
			end
		end 
		return 
	else 
		if(turtle.getItemCount(tab[1]))==1 then
			table.remove(tab,1)
		end
		return 
	end
end

function setMats(slot)
	if turtle.getItemCount(slot)==0 then
		exit()
	end
	for i=1,16 do
		turtle.select(i)
		if turtle.compareTo(slot) then
			table.insert(tab,i)
			print("lo slot ",i," contiene il materiale scelto.")
		end
	end
	turtle.select(slot)
end

function placeDown()
  checkMat()
  turtle.select(tab[1])
  if turtle.compareDown()==false then
    if turtle.getItemCount(tab[1])==0 then
      outOfResource(tab[1])
    end
    digDown()
    turtle.placeDown()
  end
end

function placeRow(l) 
	for j=2,l do
		placeDown()
		sm.forward()
	end
end

local function outOfResource()
	print("Ran out of a resource. Block: ",block , ".")
	print("Refill, then say something to proceed.")
	read()
end

mat1={}
local x,y,i,j
local slot = 1
local odd = true
x=tonumber( tArgs[1] )
y=tonumber( tArgs[2] )
turtle.select(slot)
setMats(slot)
for i=1, x do
	if odd == true then
		placeRow(y) 
		turtle.turnRight()
  		turtle.digUp()
		--tab= placeDown(tab)
 		forward()
		turtle.turnRight()
		odd  = false
	else
		placeRow(y) 
		turtle.turnLeft()
		turtle.digUp()
  		--tab=placeDown(tab)
  forward()
		turtle.turnLeft()
		odd = true
	end
end